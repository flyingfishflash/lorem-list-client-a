kind: pipeline
name: check secrets
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/build-*
    - refs/heads/chore-*
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/main
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release
    - refs/heads/style-*
    - refs/heads/test-*

steps:
  - name: check secrets
    image: alpine
    environment:
      EXITCODE: 0
      REGISTRY:
        from_secret: registry
      REGISTRY_HOSTNAME:
        from_secret: registry_hostname
      REGISTRY_USERNAME:
        from_secret: registry_username
      REGISTRY_PASSWORD:
        from_secret: registry_password
      DEPLOY_TO_HOST:
        from_secret: deploy_to_host
      DRONE_DEPLOYER_SSH_KEY_PRIVATE:
        from_secret: drone_deployer_ssh_key_private
      DRONE_DEPLOYER_SSH_USERNAME:
        from_secret: drone_deployer_ssh_username
      OIDC_NAME:
        from_secret: OIDC_NAME
      OIDC_ENDPOINT:
        from_secret: OIDC_ENDPOINT
      OIDC_CLIENT_ID:
        from_secret: OIDC_CLIENT_ID
      OIDC_SCOPE:
        from_secret: OIDC_SCOPE
      OIDC_ROLE_CLAIM:
        from_secret: OIDC_ROLE_CLAIM
      OIDC_USERNAME_CLAIM:
        from_secret: OIDC_USERNAME_CLAIM
    commands:
      - 'if [ -z "$REGISTRY" ]; then echo "registry is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$REGISTRY_HOSTNAME" ]; then echo "registry_hostname is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$REGISTRY_USERNAME" ]; then echo "deploy_to_host is not registry_username"; export EXITCODE=1; fi'
      - 'if [ -z "$REGISTRY_PASSWORD" ]; then echo "registry_password is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$DEPLOY_TO_HOST" ]; then echo "deploy_to_host is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$REGISTRY_HOSTNAME" ]; then echo "ERROR: registry_hostname is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$DRONE_DEPLOYER_SSH_KEY_PRIVATE" ]; then echo "ERROR: drone_deployer_ssh_key_private is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$DRONE_DEPLOYER_SSH_USERNAME" ]; then echo "ERROR: drone_deployer_ssh_username is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$OIDC_NAME" ]; then echo "ERROR: OIDC_NAME is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$OIDC_ENDPOINT" ]; then echo "ERROR: OIDC_ENDPOINT is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$OIDC_CLIENT_ID" ]; then echo "ERROR: OIDC_CLIENT_ID is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$OIDC_SCOPE" ]; then echo "ERROR: OIDC_SCOPE is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$OIDC_ROLE_CLAIM" ]; then echo "ERROR: OIDC_ROLE_CLAIM is not defined"; export EXITCODE=1; fi'
      - 'if [ -z "$OIDC_USERNAME_CLAIM" ]; then echo "ERROR: OIDC_USERNAME_CLAIM is not defined"; export EXITCODE=1; fi'
      - exit $EXITCODE

---
kind: pipeline
name: infer and cache version
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/build-*
    - refs/heads/chore-*
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/main
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release
    - refs/heads/style-*
    - refs/heads/test-*

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

environment:
  VERSION: .version

steps:
  - name: infer and cache version
    image: registry.flyingfishflash.net/flyingfishflash/nyx:latest
    commands:
      - export CACHE_VERSION=/drone/drone_cache/$DRONE_REPO/$VERSION
      # nyx requires git tags to infer the version
      - git fetch --tags -q
      - echo "export NYX_CURRENT_VERSION=$(nyx infer --fatal | grep 'current version' | awk '{ print $NF }' | tr -d '\n')" > $CACHE_VERSION
      - cat $CACHE_VERSION
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
name: build
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/build-*
    - refs/heads/chore-*
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/main
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release
    - refs/heads/style-*
    - refs/heads/test-*

depends_on:
  - 'check secrets'
  - infer and cache version

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

environment:
  VERSION: .version
  BUILD: .build

steps:
  - name: build
    image: node:22-alpine
    commands:
      - export CACHE_VERSION=/drone/drone_cache/$DRONE_REPO/$VERSION
      - source $CACHE_VERSION
      - |
        cat <<EOT >> $BUILD
        export BUILD_SCM_COMMIT_SHORT_SHA=$(echo $DRONE_COMMIT_SHA | cut -c1-8)
        export BUILD_NPM_CACHE=/drone/drone_cache/$DRONE_REPO/npm
        export BUILD_DIST=/drone/drone_cache/$DRONE_REPO/dist
        export PATH=/drone/src/node_modules/.bin:$PATH
        EOT
      - source $BUILD
      - env | awk -v s="BUILD_" 'index($0, s) == 1' | LC_ALL=C sort
      - mkdir -pv $BUILD_NPM_CACHE
      - mkdir -pv $BUILD_DIST
      - cd /drone/src
      - |
        export JSON_BUILD_PROPERTIES=$(node -pe "
          JSON.stringify({
            artifact: new String('lorem-list'),
            ciPipelineId: process.env.DRONE_BUILD_NUMBER,
            ciPlatform: new String('drone'),
            commit: process.env.BUILD_SCM_COMMIT_SHORT_SHA,
            group: Symbol(''),
            name: Symbol(''),
            time: Symbol(''),
            version: process.env.NYX_CURRENT_VERSION
          });
        ")
      - echo $JSON_BUILD_PROPERTIES > public/assets/buildProperties.json
      - cat public/assets/buildProperties.json
      - npm version $NYX_CURRENT_VERSION --no-git-tag-version
      - npm ci --cache $BUILD_NPM_CACHE --prefer-offline
      - ng version
      - ng build --configuration production --output-path=$BUILD_DIST/lorem-list-client-a
      - printf "\n$(ls -1a $BUILD_DIST/lorem-list-client-a | wc -l) files in $BUILD_DIST/lorem-list-client-a\n"
      - ls -la $BUILD_DIST/lorem-list-client-a
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
name: 'publish - image'
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/ci-*
    - refs/heads/chore-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release

depends_on:
  - 'build'

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache
  - name: drone_cache_dist
    host:
      path: /var/lib/docker/volumes_managed/drone_cache/lorem-list/lorem-list-client-a/dist

environment:
  TAGS: .tags
  VERSION: .version

steps:
  - name: generate image tags
    image: alpine:latest
    commands:
      - export CACHE_VERSION=/drone/drone_cache/$DRONE_REPO/$VERSION
      - cat $CACHE_VERSION
      - source $CACHE_VERSION
      - echo $NYX_CURRENT_VERSION > .version.tmp
      - tr -d '\n' < .version.tmp > $TAGS
      - rm .version.tmp
      - cat $TAGS && echo
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  - name: publish
    image: plugins/docker
    depends_on:
      - generate image tags
    privileged: true
    settings:
      auto_tag: false
      context: /drone/src
      dockerfile: /drone/src/Containerfile
      repo:
        from_secret: registry
      registry:
        from_secret: registry_hostname
      username:
        from_secret: registry_username
      password:
        from_secret: registry_password
    volumes:
      - name: drone_cache_dist
        path: /drone/src/dist

---
kind: pipeline
name: 'publish - release detail'
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/release

depends_on:
  - 'publish - image'

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

steps:
  - name: 'publish - release detail'
    image: registry.flyingfishflash.net/flyingfishflash/nyx:latest
    environment:
      NYX_FLYINGFISHFLASH_TOKEN_CODEBERG:
        from_secret: nyx_flyingfishflash_token_codeberg
      #      NYX_FLYINGFISHFLASH_TOKEN_GITHUB:
      #        from_secret: nyx_flyingfishflash_token_github
      #      NYX_FLYINGFISHFLASH_TOKEN_GITLAB:
      #        from_secret: nyx_flyingfishflash_token_gitlab
      NYX_FLYINGFISHFLASH_TOKEN_LAN:
        from_secret: nyx_flyingfishflash_token_lan
    commands:
      # nyx requires git tags to infer the current version
      - git fetch --tags -q
      # nyx is configured to push to the 'lan' remote
      # the 'lan' remote is mirrored to codeberg
      - git remote add lan https://forgejo.flyingfishflash.net/lorem-list/lorem-list-client-a.git
      - mkdir /drone/src/build
      - nyx publish --dry-run=false
    volumes:
      - name: drone_cache
        path: /drone/cache

---
kind: pipeline
name: 'prepare deployment'
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/chore-*
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release

depends_on:
  - 'publish - image'

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

environment:
  VERSION: .version

steps:
  - name: create inventory file
    image: alpine
    environment:
      DEPLOY_TO_HOST:
        from_secret: deploy_to_host
    commands:
      - export CACHE_DEPLOY=/drone/drone_cache/$DRONE_REPO/deploy
      - mkdir -pv $CACHE_DEPLOY
      - echo "$DEPLOY_TO_HOST" > $CACHE_DEPLOY/inventory
      - cat $CACHE_DEPLOY/inventory
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  - name: create variables file
    image: alpine
    environment:
      DEPLOY_TO_HOST:
        from_secret: deploy_to_host
      REGISTRY_HOSTNAME:
        from_secret: REGISTRY_HOSTNAME
      OIDC_NAME:
        from_secret: OIDC_NAME
      OIDC_ENDPOINT:
        from_secret: OIDC_ENDPOINT
      OIDC_CLIENT_ID:
        from_secret: OIDC_CLIENT_ID
      OIDC_SCOPE:
        from_secret: OIDC_SCOPE
      OIDC_ROLE_CLAIM:
        from_secret: OIDC_ROLE_CLAIM
      OIDC_USERNAME_CLAIM:
        from_secret: OIDC_USERNAME_CLAIM
    commands:
      - export CACHE_DEPLOY=/drone/drone_cache/$DRONE_REPO/deploy
      - export CACHE_VERSION=/drone/drone_cache/$DRONE_REPO/$VERSION
      - source $CACHE_VERSION
      - mkdir -pv $CACHE_DEPLOY
      - echo "---" > $CACHE_DEPLOY/variables.yaml
      - 'echo "tag: $NYX_CURRENT_VERSION" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "registry_url: $REGISTRY_HOSTNAME/lorem-list" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "deploy_to_host: $DEPLOY_TO_HOST" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "oidc_name: $OIDC_NAME" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "oidc_endpoint: $OIDC_ENDPOINT" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "oidc_client_id: $OIDC_CLIENT_ID" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "oidc_scope: $OIDC_SCOPE" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "oidc_role_claim: $OIDC_ROLE_CLAIM" >> $CACHE_DEPLOY/variables.yaml'
      - 'echo "oidc_username_claim: $OIDC_USERNAME_CLAIM" >> $CACHE_DEPLOY/variables.yaml'
      - ls -l $CACHE_DEPLOY
      - cat $CACHE_DEPLOY/inventory
      - cat $CACHE_DEPLOY/variables.yaml
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
name: 'deploy [dev]'
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/chore-*
    - refs/heads/ci-*
    - refs/heads/dependencies
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*

depends_on:
  - 'prepare deployment'

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

environment:
  VERSION: .version

steps:
  - name: restore playbook files from cache
    image: alpine:latest
    commands:
      - export CACHE_DEPLOY=/drone/drone_cache/$DRONE_REPO/deploy
      - cp -v $CACHE_DEPLOY/variables.yaml ci/drone/deploy/
      - cp -v $CACHE_DEPLOY/inventory ci/drone/deploy/
      - ls -l ci/drone/deploy/
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  # the secret containing the ssh private key must be created via the CLI
  # drone secret add --repository lorem-list/lorem-list-client-a --name secret_name --data @/home/xxx/.ssh/id_xxx
  - name: execute deployment
    image: plugins/ansible
    depends_on:
      - restore playbook files from cache
    settings:
      extra_vars: 'region=dev'
      galaxy: ci/drone/deploy/requirements.yaml
      inventory: ci/drone/deploy/inventory
      playbook: ci/drone/deploy/deploy.yaml
      private_key:
        from_secret: drone_deployer_ssh_key_private
      user:
        from_secret: drone_deployer_ssh_username

---
kind: pipeline
name: 'deploy [prd]'
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/release

depends_on:
  - 'prepare deployment'

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

environment:
  VERSION: .version

steps:
  - name: restore playbook files from cache
    image: alpine:latest
    commands:
      - export CACHE_DEPLOY=/drone/drone_cache/$DRONE_REPO/deploy
      - cp -v $CACHE_DEPLOY/variables.yaml ci/drone/deploy/
      - cp -v $CACHE_DEPLOY/inventory ci/drone/deploy/
      - ls -l ci/drone/deploy/
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  # the secret containing the ssh private key must be created via the CLI
  # drone secret add --repository lorem-list/lorem-list-client-a --name secret_name --data @/home/xxx/.ssh/id_xxx
  - name: execute deployment
    image: plugins/ansible
    depends_on:
      - restore playbook files from cache
    settings:
      extra_vars: 'region=prd'
      galaxy: ci/drone/deploy/requirements.yaml
      inventory: ci/drone/deploy/inventory
      playbook: ci/drone/deploy/deploy.yaml
      private_key:
        from_secret: drone_deployer_ssh_key_private
      user:
        from_secret: drone_deployer_ssh_username

---
kind: pipeline
name: 'clean cache'
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/*

depends_on:
  - 'deploy [dev]'
  - 'deploy [prd]'

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

environment:
  VERSION: .version

steps:
  - name: clean cache
    image: alpine:latest
    commands:
      - export CACHE_VERSION=/drone/drone_cache/$DRONE_REPO/$VERSION
      - export CACHE_DEPLOY=/drone/drone_cache/$DRONE_REPO/deploy
      - export CACHE_DIST=/drone/drone_cache/$DRONE_REPO/dist
      - echo $CACHE_VERSION
      - echo $CACHE_DEPLOY
      - echo $CACHE_DIST
      - rm -vf $CACHE_VERSION
      - rm -rvf $CACHE_DEPLOY
      - rm -rvf $CACHE_DIST
    volumes:
      - name: drone_cache
        path: /drone/drone_cache
